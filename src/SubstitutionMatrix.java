/**
 * Created by william on 2017-04-02.
 */
public class SubstitutionMatrix {
    private static int[][] blos50 = {
            /*A,  R,  N,  D,  C,  Q,  E,  G,  H,  I,  L,  K,  M,
             F,  P,  S,  T,  W,  Y,  V,  B,  J,  Z,  X,  *        */
    /*A*/    {5, -2, -1, -2, -1, -1, -1,  0, -2, -1, -2, -1, -1,
            -3, -1,  1,  0, -3, -2,  0, -2, -2, -1, -1, -5},
    /*R*/   {-2,  7, -1, -2, -4,  1,  0, -3,  0, -4, -3,  3, -2,
            -3, -3, -1, -1, -3, -1, -3, -1, -3,  0, -1, -5},
    /*N*/   {-1, -1,  7,  2, -2,  0,  0,  0,  1, -3, -4,  0, -2,
            -4, -2,  1,  0, -4, -2, -3,  5, -4,  0, -1, -5},
    /*D*/  {-2, -2,  2,  8, -4,  0,  2, -1, -1, -4, -4, -1, -4,
            -5, -1,  0, -1, -5, -3, -4,  6, -4,  1, -1, -5},
    /*C*/  {-1, -4, -2, -4, 13, -3, -3, -3, -3, -2, -2, -3, -2,
            -2, -4, -1, -1, -5, -3, -1, -3, -2, -3, -1, -5},
    /*Q*/   {-1,  1,  0,  0, -3,  7,  2, -2,  1, -3, -2,  2,  0,
            -4, -1,  0, -1, -1, -1, -3,  0, -3,  4, -1, -5},
    /*E*/   {-1,  0,  0,  2, -3,  2,  6, -3,  0, -4, -3,  1, -2,
            -3, -1, -1, -1, -3, -2, -3,  1, -3,  5, -1, -5},
    /*G*/   { 0, -3,  0, -1, -3, -2, -3,  8, -2, -4, -4, -2, -3,
            -4, -2,  0, -2, -3, -3, -4, -1, -4, -2, -1, -5},
    /*H*/   {-2,  0,  1, -1, -3,  1,  0, -2, 10, -4, -3,  0, -1,
            -1, -2, -1, -2, -3,  2, -4,  0, -3,  0, -1, -5},
    /*I*/  { -1, -4, -3, -4, -2, -3, -4, -4, -4,  5,  2, -3,  2,
            0, -3, -3, -1, -3, -1,  4, -4,  4, -3, -1, -5},
    /*L*/   {-2, -3, -4, -4, -2, -2, -3, -4, -3,  2,  5, -3,  3,
            1, -4, -3, -1, -2, -1,  1, -4,  4, -3, -1, -5},
    /*K*/   {-1,  3,  0, -1, -3,  2,  1, -2,  0, -3, -3,  6, -2,
            -4, -1,  0, -1, -3, -2, -3,  0, -3,  1, -1, -5},
    /*M*/  {-1, -2, -2, -4, -2,  0, -2, -3, -1,  2,  3, -2,  7,
            0, -3, -2, -1, -1,  0,  1, -3,  2, -1, -1, -5},
    /*F*/   {-3, -3, -4, -5, -2, -4, -3, -4, -1,  0,  1, -4,  0,
            8, -4, -3, -2,  1,  4, -1, -4,  1, -4, -1, -5},
    /*P*/  { -1, -3, -2, -1, -4, -1, -1, -2, -2, -3, -4, -1, -3,
            -4, 10, -1, -1, -4, -3, -3, -2, -3, -1, -1, -5},
    /*S*/   { 1, -1,  1,  0, -1,  0, -1,  0, -1, -3, -3,  0, -2,
            -3, -1,  5,  2, -4, -2, -2,  0, -3,  0, -1, -5},
    /*T*/   { 0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1,
            -2, -1,  2,  5, -3, -2,  0,  0, -1, -1, -1, -5},
    /*W*/  { -3, -3, -4, -5, -5, -1, -3, -3, -3, -3, -2, -3, -1,
            1, -4, -4, -3, 15,  2, -3, -5, -2, -2, -1, -5},
    /*Y*/   {-2, -1, -2, -3, -3, -1, -2, -3,  2, -1, -1, -2,  0,
            4, -3, -2, -2,  2,  8, -1, -3, -1, -2, -1, -5},
    /*V*/   { 0, -3, -3, -4, -1, -3, -3, -4, -4,  4,  1, -3,  1,
            -1, -3, -2,  0, -3, -1,  5, -3,  2, -3, -1, -5},
    /*B*/   {-2, -1,  5,  6, -3,  0,  1, -1,  0, -4, -4,  0, -3,
            -4, -2,  0,  0, -5, -3, -3,  6, -4,  1, -1, -5},
    /*J*/   {-2, -3, -4, -4, -2, -3, -3, -4, -3,  4,  4, -3,  2,
            1, -3, -3, -1, -2, -1,  2, -4,  4, -3, -1, -5},
    /*Z*/   {-1,  0,  0,  1, -3,  4,  5, -2,  0, -3, -3,  1, -1,
            -4, -1,  0, -1, -2, -2, -3,  1, -3,  5, -1, -5},
    /*X*/   {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5},
            {  -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
                    -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1}
    };
    private static int[][] blos90 = {
    /*       A,  R,  N,  D,  C,  Q,  E,  G,  H,  I,  L,  K,  M,
             F,  P,  S,  T,  W,  Y,  V,  B,  J,  Z,  X,  *        */
    /*A*/    {5, -2, -2, -3, -1, -1, -1,  0, -2, -2, -2, -1, -2,
                -3, -1,  1,  0, -4, -3, -1, -2, -2, -1, -1, -6},
    /*R*/   {-2,  6, -1, -3, -5,  1, -1, -3,  0, -4, -3,  2, -2,
                -4, -3, -1, -2, -4, -3, -3, -2, -3,  0, -1, -6},
    /*N*/   {-2, -1,  7,  1, -4,  0, -1, -1,  0, -4, -4,  0, -3,
                -4, -3,  0,  0, -5, -3, -4,  5, -4, -1, -1, -6},
    /*D*/   {-3, -3,  1,  7, -5, -1,  1, -2, -2, -5, -5, -1, -4,
                -5, -3, -1, -2, -6, -4, -5,  5, -5,  1, -1, -6},
    /*C*/   {-1, -5, -4, -5,  9, -4, -6, -4, -5, -2, -2, -4, -2,
                -3, -4, -2, -2, -4, -4, -2, -4, -2, -5, -1, -6},
    /*Q*/   {-1,  1,  0, -1, -4,  7,  2, -3,  1, -4, -3,  1,  0,
                -4, -2, -1, -1, -3, -3, -3, -1, -3,  5, -1, -6},
    /*E*/   {-1, -1, -1,  1, -6,  2,  6, -3, -1, -4, -4,  0, -3,
                -5, -2, -1, -1, -5, -4, -3,  1, -4,  5, -1, -6},
    /*G*/   {0, -3, -1, -2, -4, -3, -3,  6, -3, -5, -5, -2, -4,
                -5, -3, -1, -3, -4, -5, -5, -2, -5, -3, -1, -6},
    /*H*/   {-2,  0,  0, -2, -5,  1, -1, -3,  8, -4, -4, -1, -3,
                -2, -3, -2, -2, -3,  1, -4, -1, -4,  0, -1, -6},
    /*I*/   {-2, -4, -4, -5, -2, -4, -4, -5, -4,  5,  1, -4,  1,
                -1, -4, -3, -1, -4, -2,  3, -5,  3, -4, -1, -6},
    /*L*/   {-2, -3, -4, -5, -2, -3, -4, -5, -4,  1,  5, -3,  2,
                0, -4, -3, -2, -3, -2,  0, -5,  4, -4, -1, -6},
    /*K*/   {-1,  2,  0, -1, -4,  1,  0, -2, -1, -4, -3,  6, -2,
                -4, -2, -1, -1, -5, -3, -3, -1, -3,  1, -1, -6},
    /*M*/   {-2, -2, -3, -4, -2,  0, -3, -4, -3,  1,  2, -2,  7,
                -1, -3, -2, -1, -2, -2,  0, -4,  2, -2, -1, -6},
    /*F*/   {-3, -4, -4, -5, -3, -4, -5, -5, -2, -1,  0, -4, -1,
                7, -4, -3, -3,  0,  3, -2, -4,  0, -4, -1, -6},
    /*P*/   {-1, -3, -3, -3, -4, -2, -2, -3, -3, -4, -4, -2, -3,
                -4,  8, -2, -2, -5, -4, -3, -3, -4, -2, -1, -6},
    /*S*/   { 1, -1,  0, -1, -2, -1, -1, -1, -2, -3, -3, -1, -2,
                -3, -2,  5,  1, -4, -3, -2,  0, -3, -1, -1, -6},
    /*T*/   { 0, -2,  0, -2, -2, -1, -1, -3, -2, -1, -2, -1, -1,
                -3, -2,  1,  6, -4, -2, -1, -1, -2, -1, -1, -6},
    /*W*/   {-4, -4, -5, -6, -4, -3, -5, -4, -3, -4, -3, -5, -2,
                0, -5, -4, -4, 11,  2, -3, -6, -3, -4, -1, -6},
    /*Y*/   {-3, -3, -3, -4, -4, -3, -4, -5,  1, -2, -2, -3, -2,
                3, -4, -3, -2,  2,  8, -3, -4, -2, -3, -1, -6},
    /*V*/   {-1, -3, -4, -5, -2, -3, -3, -5, -4,  3,  0, -3,  0,
                -2, -3, -2, -1, -3, -3,  5, -4,  1, -3, -1, -6},
    /*B*/   {-2, -2,  5,  5, -4, -1,  1, -2, -1, -5, -5, -1, -4,
                -4, -3,  0, -1, -6, -4, -4,  5, -5,  0, -1, -6},
    /*J*/   {-2, -3, -4, -5, -2, -3, -4, -5, -4,  3,  4, -3,  2,
                0, -4, -3, -2, -3, -2,  1, -5,  4, -4, -1, -6},
    /*Z*/   {-1,  0, -1,  1, -5,  5,  5, -3,  0, -4, -4,  1, -2,
                -4, -2, -1, -1, -4, -3, -3,  0, -4,  5, -1, -6},
    /*X*/   {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -6},
                /***/   {-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
                -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1}
    };


    public SubstitutionMatrix() {
    }

    private static int getIndex(char a) {
        // check for upper and lowercase characters
        switch ((String.valueOf(a)).toUpperCase().charAt(0)) {
            case 'A': return 0;
            case 'R': return 1;
            case 'N': return 2;
            case 'D': return 3;
            case 'C': return 4;
            case 'Q': return 5;
            case 'E': return 6;
            case 'G': return 7;
            case 'H': return 8;
            case 'I': return 9;
            case 'L': return 10;
            case 'K': return 11;
            case 'M': return 12;
            case 'F': return 13;
            case 'P': return 14;
            case 'S': return 15;
            case 'T': return 16;
            case 'W': return 17;
            case 'Y': return 18;
            case 'V': return 19;
            case 'B': return 20;
            case 'J': return 21;
            case 'Z': return 22;
            case 'X': return 23;
            default: throw new InvalidAlphabetException(a, "Invalid amino acid character");
        }
    }


    public static int[][] getBlos50() {
        return blos50;
    }

    public static int[][] getBlos90() {
        return blos90;
    }

    private static int getDistance(int i, int j) {
        if (i < 0 || i > blos50[0].length) {
            throw new InvalidAlphabetException("Invalid amino acid character at string1, position " + i);
        }
        if (j < 0 || j > blos50[0].length) {
            throw new InvalidAlphabetException("Invalid amino acid character at string2, position " + j);
        }

        return blos50[i][j];
    }

    public static int getDistance(char a1, char a2) {
        // toUpper
        return getDistance(getIndex(a1), getIndex(a2));
    }

}
